{"version":3,"sources":["components/Navbar.js","components/Def.js","components/Spinner.js","components/About.js","App.js","index.js"],"names":["Navbar","props","handelDarkMode","setState","mode","state","darkModetext","document","body","style","backgroundColor","color","className","id","to","type","onClick","this","Component","Def","defs","Spinner","role","About","class","App","handelWordChange","e","word","target","value","showData","a","loading","data","default","url","fetch","rawData","json","parsedData","list","length","definition","exact","path","onChange","map","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4319c894.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./main.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport class Navbar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      darkModetext: \"Dark Mode\",\r\n      mode: \"Light\",\r\n    };\r\n  }\r\n\r\n  // Dark mode handler.\r\n  handelDarkMode = () => {\r\n    this.setState({ mode: \"Dark\" });\r\n\r\n    if (this.state.mode === \"Light\") {\r\n      this.setState({ darkModetext: \"Light Mode\" });\r\n      document.body.style.backgroundColor = \"#232323\";\r\n      document.body.style.color = \"white\";\r\n    } else {\r\n      this.setState({ darkModetext: \"Dark Mode\" });\r\n      document.body.style.backgroundColor = \"white\";\r\n      document.body.style.color = \"black\";\r\n      this.setState({ mode: \"Light\" });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar  navbar-expand-lg navbar-dark bg-dark p-3\">\r\n          <div className=\"container-fluid\">\r\n            <Link className=\"navbar-brand badge bg-secondary\" id=\"logo\" to=\"/\">\r\n              Dictionary\r\n            </Link>\r\n            <button\r\n              className=\"navbar-toggler\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#navbarSupportedContent\"\r\n              aria-controls=\"navbarSupportedContent\"\r\n              aria-expanded=\"false\"\r\n              aria-label=\"Toggle navigation\"\r\n            >\r\n              <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div\r\n              className=\"collapse navbar-collapse\"\r\n              id=\"navbarSupportedContent\"\r\n            >\r\n              <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                <li className=\"nav-item\">\r\n                  <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                    Home\r\n                  </Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <Link className=\"nav-link\" to=\"/about\">\r\n                    About\r\n                  </Link>\r\n                </li>\r\n              </ul>\r\n              <div className=\"d-flex\">\r\n                <button\r\n                  className=\"btn btn-primary\"\r\n                  onClick={this.handelDarkMode}\r\n                >\r\n                  {this.state.darkModetext}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from 'react'\r\nimport \"./main.css\"\r\n\r\nexport class Def extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"container text-center defs\">\r\n            \r\n                <li className=\"my-3\">{this.props.defs}</li>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Def\r\n","import React, { Component } from \"react\";\r\n\r\nexport class Spinner extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <div className=\"d-flex justify-content-center \">\r\n            <div className=\"spinner-border m-5\" role=\"status\">\r\n              <span className=\"visually-hidden\">Loading...</span>\r\n            </div>\r\n           \r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Spinner;\r\n","import React, { Component } from \"react\";\r\n\r\nexport class About extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"p-3 h-100\">\r\n        <h1>Dictionary App made with React.</h1>\r\n\r\n        <div className=\"my-3\">\r\n          <p>\r\n            This is a simple dictionary web app made with react. I've used the\r\n            urbandictionary api in this project. I don't know why the meanings\r\n            of the words that we get in response are wierd, but still I am able\r\n            to fetch the data from the api.\r\n          </p>\r\n\r\n          <p className=\"my-2\">\r\n            Enter the word in the provided input box and click on find. You will\r\n            get all the results available related to the entered word. The\r\n            definitions may not be right, this is just a practice project. The\r\n            main motive of this react app is to test skills.\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"p-3\">\r\n          <div class=\"accordion accordion-flush\" id=\"accordionFlushExample\">\r\n            <div class=\"accordion-item\">\r\n              <h2 class=\"accordion-header\" id=\"flush-headingOne\">\r\n                <button\r\n                  class=\"accordion-button collapsed\"\r\n                  type=\"button\"\r\n                  data-bs-toggle=\"collapse\"\r\n                  data-bs-target=\"#flush-collapseOne\"\r\n                  aria-expanded=\"false\"\r\n                  aria-controls=\"flush-collapseOne\"\r\n                >\r\n                  Accordion Item #1\r\n                </button>\r\n              </h2>\r\n              <div\r\n                id=\"flush-collapseOne\"\r\n                class=\"accordion-collapse collapse\"\r\n                aria-labelledby=\"flush-headingOne\"\r\n                data-bs-parent=\"#accordionFlushExample\"\r\n              >\r\n                <div class=\"accordion-body\">\r\n                  Placeholder content for this accordion, which is intended to\r\n                  demonstrate the <code>.accordion-flush</code> class. This is\r\n                  the first item's accordion body.\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"accordion-item\">\r\n              <h2 class=\"accordion-header\" id=\"flush-headingTwo\">\r\n                <button\r\n                  class=\"accordion-button collapsed\"\r\n                  type=\"button\"\r\n                  data-bs-toggle=\"collapse\"\r\n                  data-bs-target=\"#flush-collapseTwo\"\r\n                  aria-expanded=\"false\"\r\n                  aria-controls=\"flush-collapseTwo\"\r\n                >\r\n                  Accordion Item #2\r\n                </button>\r\n              </h2>\r\n              <div\r\n                id=\"flush-collapseTwo\"\r\n                class=\"accordion-collapse collapse\"\r\n                aria-labelledby=\"flush-headingTwo\"\r\n                data-bs-parent=\"#accordionFlushExample\"\r\n              >\r\n                <div class=\"accordion-body\">\r\n                  Placeholder content for this accordion, which is intended to\r\n                  demonstrate the <code>.accordion-flush</code> class. This is\r\n                  the second item's accordion body. Let's imagine this being\r\n                  filled with some actual content.\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"accordion-item\">\r\n              <h2 class=\"accordion-header\" id=\"flush-headingThree\">\r\n                <button\r\n                  class=\"accordion-button collapsed\"\r\n                  type=\"button\"\r\n                  data-bs-toggle=\"collapse\"\r\n                  data-bs-target=\"#flush-collapseThree\"\r\n                  aria-expanded=\"false\"\r\n                  aria-controls=\"flush-collapseThree\"\r\n                >\r\n                  Accordion Item #3\r\n                </button>\r\n              </h2>\r\n              <div\r\n                id=\"flush-collapseThree\"\r\n                class=\"accordion-collapse collapse\"\r\n                aria-labelledby=\"flush-headingThree\"\r\n                data-bs-parent=\"#accordionFlushExample\"\r\n              >\r\n                <div class=\"accordion-body\">\r\n                  Placeholder content for this accordion, which is intended to\r\n                  demonstrate the <code>.accordion-flush</code> class. This is\r\n                  the third item's accordion body. Nothing more exciting\r\n                  happening here in terms of content, but just filling up the\r\n                  space to make it look, at least at first glance, a bit more\r\n                  representative of how this would look in a real-world\r\n                  application.\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default About;\r\n","import React, { Component } from \"react\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport Def from \"./components/Def\";\r\nimport \"./components/main.css\";\r\nimport Spinner from \"./components/Spinner\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport About from \"./components/About\";\r\n\r\nexport class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      word: \"\",\r\n      data: [],\r\n      loading: false,\r\n      default:\r\n        \"Enter the word in the above input box and click on find. You will get all the results available related to the entered word. The definitions may not be right, this is just a practice project. The main motive of this react app is to test skills.\",\r\n    };\r\n  }\r\n\r\n  // Input word change handler.\r\n  handelWordChange = (e) => {\r\n    this.setState({ word: e.target.value });\r\n  };\r\n\r\n  // Function for fetching and rendering the data.\r\n  showData = async () => {\r\n    this.setState({ loading: true, data: [], default: \"\" });\r\n    let url = `https://api.urbandictionary.com/v0/define?term=${this.state.word}`;\r\n    let rawData = await fetch(url);\r\n    let parsedData = await rawData.json();\r\n\r\n    // Checking the condition, if the user enters a strange word and the response for that word is an empty string, show the \"Result not available text\".\r\n    if (parsedData.list.length === 0) {\r\n      this.setState({\r\n        data: {\r\n          list: [{ definition: \"Results are not available for this word.\" }],\r\n        },\r\n        loading: false,\r\n      });\r\n    } else {\r\n      this.setState({ data: parsedData, loading: false });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Navbar />\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <div\r\n              id=\"srch-sec\"\r\n              className=\" text-center p-5 d-flex align-items-center justify-content-center  m-3  flex-column\"\r\n            >\r\n              <h1>Enter the word below...</h1>\r\n\r\n              <div className=\"my-2 d-flex align-items-center\">\r\n                <input\r\n                  type=\"text\"\r\n                  value={this.state.value}\r\n                  onChange={this.handelWordChange}\r\n                  className=\"col-form-label mx-2\"\r\n                />\r\n\r\n                <button\r\n                  onClick={this.showData}\r\n                  className=\"btn btn-success px-4 py-2 mob\"\r\n                >\r\n                  Find\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Loading spinner effect */}\r\n            {this.state.loading && <Spinner />}\r\n\r\n            <div className=\"container content text-center\">\r\n              <p>{this.state.default} </p>\r\n              {this.state.data.list?.map((e) => {\r\n                return <Def defs={e.definition} />;\r\n              })}\r\n            </div>\r\n          </Route>\r\n          <Route path=\"/about\">\r\n            <About />\r\n          </Route>\r\n        </Switch>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      {\" \"}\n      <App />\n    </HashRouter>\n    ,\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}